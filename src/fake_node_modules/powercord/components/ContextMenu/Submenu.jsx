/**
 * Powercord, a lightweight @discordapp client mod focused on simplicity and performance
 * Copyright (C) 2018-2019  aetheryx & Bowser65
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

const { React, contextMenu } = require('powercord/webpack');

let ContextMenu;
setImmediate(() => (
  ContextMenu = require('./ContextMenu.jsx')
));

class SubmenuItem extends React.Component {
  constructor () {
    super();

    this.state = {
      hovered: false,
      items: [],
      coords: {
        x: 0,
        y: 0
      }
    };
  }

  onClick ({ target }) {
    if (target.childNodes[0].nodeValue !== this.props.name) {
      return;
    }

    contextMenu.closeContextMenu();
    if (this.props.onClick) {
      this.props.onClick();
    }
  }

  onEnter (evt) {
    const { x, y, height } = evt.target.getBoundingClientRect();

    this.setState({
      hovered: true,
      coords: {
        x,
        y: y + height + 2
      }
    });
  }

  onLeave () {
    this.setState({
      hovered: false
    });
  }

  async componentDidMount () {
    const items = await this.props.getItems();
    return this.setState({ items });
  }

  render () {
    const submenu = (
      <div
        className={`pc-item pc-itemSubMenu item-1Yvehc itemSubMenu-1vN_Yn
          ${this.props.className || ''}
          ${this.props.image ? 'pc-itemImage itemImage-htIz_v' : ''}`}
        onClick={this.onClick.bind(this)}
        onMouseEnter={this.onEnter.bind(this)}
        onMouseLeave={this.onLeave.bind(this)}
      >
        {this.props.name}
        {
          this.state.hovered && this.state.items[0]
            ? this.getSubContextMenu()
            : null
        }
        {this.props.image
          ? this.getSubmenuImage()
          : <div className='pc-hint hint-22uc-R'>
            {this.props.hint}
          </div>}
      </div>
    );

    if (this.props.seperate) {
      return (
        <div className='pc-itemGroup itemGroup-1tL0uz seperated'>
          {submenu}
        </div>
      );
    }

    return submenu;
  }

  getSubmenuImage () {
    return (
      this.props.image.startsWith('fa-')
        ? <div style={{ cursor: 'pointer!important',
          marginRight: '10px' }} class={`${this.props.image.endsWith('-regular')
          ? 'far'
          : this.props.image.endsWith('-brand')
            ? 'fab'
            : 'fas'}
          ${this.props.image.replace(/-regular|-brand/gi, '')} fa-fw`} />
        : <img alt className={this.props.iconClassName || ''}
          style={{ marginRight: '10px' }} src={this.props.image} />
    );
  }

  getSubContextMenu () {
    return (
      <ContextMenu
        pageX={this.state.coords.x}
        pageY={this.state.coords.y}
        width={this.props.width || ''}
        itemGroups={[ this.state.items ]}
      />
    );
  }
}

module.exports = SubmenuItem;
